<?php

require_once 'propel/om/BaseObject.php';

require_once 'propel/om/Persistent.php';


include_once 'propel/util/Criteria.php';

include_once 'src/model/whiteboard/UserPeer.php';

/**
 * Base class that represents a row from the 'user' table.
 *
 * User Table
 *
 * This class was autogenerated by Propel on:
 *
 * 02/15/13 21:36:51
 *
 * @package    src/model/whiteboard.om
 */
abstract class BaseUser extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UserPeer
	 */
	protected static $peer;


	/**
	 * The value for the user_id field.
	 * @var        int
	 */
	protected $user_id;


	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;


	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;


	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;


	/**
	 * The value for the roomcreator field.
	 * @var        boolean
	 */
	protected $roomcreator;

	/**
	 * Collection to store aggregation of collRooms.
	 * @var        array
	 */
	protected $collRooms;

	/**
	 * The criteria used to select the current contents of collRooms.
	 * @var        Criteria
	 */
	protected $lastRoomCriteria = null;

	/**
	 * Collection to store aggregation of collMessages.
	 * @var        array
	 */
	protected $collMessages;

	/**
	 * The criteria used to select the current contents of collMessages.
	 * @var        Criteria
	 */
	protected $lastMessageCriteria = null;

	/**
	 * Collection to store aggregation of collHistorys.
	 * @var        array
	 */
	protected $collHistorys;

	/**
	 * The criteria used to select the current contents of collHistorys.
	 * @var        Criteria
	 */
	protected $lastHistoryCriteria = null;

	/**
	 * Collection to store aggregation of collProductionHistorys.
	 * @var        array
	 */
	protected $collProductionHistorys;

	/**
	 * The criteria used to select the current contents of collProductionHistorys.
	 * @var        Criteria
	 */
	protected $lastProductionHistoryCriteria = null;

	/**
	 * Collection to store aggregation of collOnlines.
	 * @var        array
	 */
	protected $collOnlines;

	/**
	 * The criteria used to select the current contents of collOnlines.
	 * @var        Criteria
	 */
	protected $lastOnlineCriteria = null;

	/**
	 * Collection to store aggregation of collPermissions.
	 * @var        array
	 */
	protected $collPermissions;

	/**
	 * The criteria used to select the current contents of collPermissions.
	 * @var        Criteria
	 */
	protected $lastPermissionCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [user_id] column value.
	 * User id
	 * @return     int
	 */
	public function getUserId()
	{

		return $this->user_id;
	}

	/**
	 * Get the [name] column value.
	 * name
	 * @return     string
	 */
	public function getName()
	{

		return $this->name;
	}

	/**
	 * Get the [email] column value.
	 * e-mail
	 * @return     string
	 */
	public function getEmail()
	{

		return $this->email;
	}

	/**
	 * Get the [password] column value.
	 * password
	 * @return     string
	 */
	public function getPassword()
	{

		return $this->password;
	}

	/**
	 * Get the [roomcreator] column value.
	 * Right to create rooms
	 * @return     boolean
	 */
	public function getRoomcreator()
	{

		return $this->roomcreator;
	}

	/**
	 * Set the value of [user_id] column.
	 * User id
	 * @param      int $v new value
	 * @return     void
	 */
	public function setUserId($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->user_id !== $v) {
			$this->user_id = $v;
			$this->modifiedColumns[] = UserPeer::USER_ID;
		}

	} // setUserId()

	/**
	 * Set the value of [name] column.
	 * name
	 * @param      string $v new value
	 * @return     void
	 */
	public function setName($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = UserPeer::NAME;
		}

	} // setName()

	/**
	 * Set the value of [email] column.
	 * e-mail
	 * @param      string $v new value
	 * @return     void
	 */
	public function setEmail($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = UserPeer::EMAIL;
		}

	} // setEmail()

	/**
	 * Set the value of [password] column.
	 * password
	 * @param      string $v new value
	 * @return     void
	 */
	public function setPassword($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = UserPeer::PASSWORD;
		}

	} // setPassword()

	/**
	 * Set the value of [roomcreator] column.
	 * Right to create rooms
	 * @param      boolean $v new value
	 * @return     void
	 */
	public function setRoomcreator($v)
	{

		if ($this->roomcreator !== $v) {
			$this->roomcreator = $v;
			$this->modifiedColumns[] = UserPeer::ROOMCREATOR;
		}

	} // setRoomcreator()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (1-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      ResultSet $rs The ResultSet class with cursor advanced to desired record pos.
	 * @param      int $startcol 1-based offset column which indicates which restultset column to start with.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate(ResultSet $rs, $startcol = 1)
	{
		try {

			$this->user_id = $rs->getInt($startcol + 0);

			$this->name = $rs->getString($startcol + 1);

			$this->email = $rs->getString($startcol + 2);

			$this->password = $rs->getString($startcol + 3);

			$this->roomcreator = $rs->getBoolean($startcol + 4);

			$this->resetModified();

			$this->setNew(false);

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 5; // 5 = UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating User object", $e);
		}
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      Connection $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			UserPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.  If the object is new,
	 * it inserts it; otherwise an update is performed.  This method
	 * wraps the doSave() worker method in a transaction.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			$affectedRows = $this->doSave($con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave($con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UserPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setUserId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UserPeer::doUpdate($this, $con);
				}
				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collRooms !== null) {
				foreach($this->collRooms as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMessages !== null) {
				foreach($this->collMessages as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collHistorys !== null) {
				foreach($this->collHistorys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProductionHistorys !== null) {
				foreach($this->collProductionHistorys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collOnlines !== null) {
				foreach($this->collOnlines as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPermissions !== null) {
				foreach($this->collPermissions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;
		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = UserPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collRooms !== null) {
					foreach($this->collRooms as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMessages !== null) {
					foreach($this->collMessages as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collHistorys !== null) {
					foreach($this->collHistorys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProductionHistorys !== null) {
					foreach($this->collProductionHistorys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collOnlines !== null) {
					foreach($this->collOnlines as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPermissions !== null) {
					foreach($this->collPermissions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UserPeer::DATABASE_NAME);

		if ($this->isColumnModified(UserPeer::USER_ID)) $criteria->add(UserPeer::USER_ID, $this->user_id);
		if ($this->isColumnModified(UserPeer::NAME)) $criteria->add(UserPeer::NAME, $this->name);
		if ($this->isColumnModified(UserPeer::EMAIL)) $criteria->add(UserPeer::EMAIL, $this->email);
		if ($this->isColumnModified(UserPeer::PASSWORD)) $criteria->add(UserPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(UserPeer::ROOMCREATOR)) $criteria->add(UserPeer::ROOMCREATOR, $this->roomcreator);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UserPeer::DATABASE_NAME);

		$criteria->add(UserPeer::USER_ID, $this->user_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getUserId();
	}

	/**
	 * Generic method to set the primary key (user_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setUserId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of User (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setName($this->name);

		$copyObj->setEmail($this->email);

		$copyObj->setPassword($this->password);

		$copyObj->setRoomcreator($this->roomcreator);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach($this->getRooms() as $relObj) {
				$copyObj->addRoom($relObj->copy($deepCopy));
			}

			foreach($this->getMessages() as $relObj) {
				$copyObj->addMessage($relObj->copy($deepCopy));
			}

			foreach($this->getHistorys() as $relObj) {
				$copyObj->addHistory($relObj->copy($deepCopy));
			}

			foreach($this->getProductionHistorys() as $relObj) {
				$copyObj->addProductionHistory($relObj->copy($deepCopy));
			}

			foreach($this->getOnlines() as $relObj) {
				$copyObj->addOnline($relObj->copy($deepCopy));
			}

			foreach($this->getPermissions() as $relObj) {
				$copyObj->addPermission($relObj->copy($deepCopy));
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setUserId(NULL); // this is a pkey column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     User Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UserPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UserPeer();
		}
		return self::$peer;
	}

	/**
	 * Temporary storage of collRooms to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initRooms()
	{
		if ($this->collRooms === null) {
			$this->collRooms = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User has previously
	 * been saved, it will retrieve related Rooms from storage.
	 * If this User is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getRooms($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BaseRoomPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRooms === null) {
			if ($this->isNew()) {
			   $this->collRooms = array();
			} else {

				$criteria->add(RoomPeer::USER_ID, $this->getUserId());

				RoomPeer::addSelectColumns($criteria);
				$this->collRooms = RoomPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RoomPeer::USER_ID, $this->getUserId());

				RoomPeer::addSelectColumns($criteria);
				if (!isset($this->lastRoomCriteria) || !$this->lastRoomCriteria->equals($criteria)) {
					$this->collRooms = RoomPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRoomCriteria = $criteria;
		return $this->collRooms;
	}

	/**
	 * Returns the number of related Rooms.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countRooms($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BaseRoomPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(RoomPeer::USER_ID, $this->getUserId());

		return RoomPeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a Room object to this object
	 * through the Room foreign key attribute
	 *
	 * @param      Room $l Room
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRoom(Room $l)
	{
		$this->collRooms[] = $l;
		$l->setUser($this);
	}

	/**
	 * Temporary storage of collMessages to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initMessages()
	{
		if ($this->collMessages === null) {
			$this->collMessages = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User has previously
	 * been saved, it will retrieve related Messages from storage.
	 * If this User is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getMessages($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BaseMessagePeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMessages === null) {
			if ($this->isNew()) {
			   $this->collMessages = array();
			} else {

				$criteria->add(MessagePeer::USER_ID, $this->getUserId());

				MessagePeer::addSelectColumns($criteria);
				$this->collMessages = MessagePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MessagePeer::USER_ID, $this->getUserId());

				MessagePeer::addSelectColumns($criteria);
				if (!isset($this->lastMessageCriteria) || !$this->lastMessageCriteria->equals($criteria)) {
					$this->collMessages = MessagePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMessageCriteria = $criteria;
		return $this->collMessages;
	}

	/**
	 * Returns the number of related Messages.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countMessages($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BaseMessagePeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(MessagePeer::USER_ID, $this->getUserId());

		return MessagePeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a Message object to this object
	 * through the Message foreign key attribute
	 *
	 * @param      Message $l Message
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMessage(Message $l)
	{
		$this->collMessages[] = $l;
		$l->setUser($this);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Messages from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getMessagesJoinProduction($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BaseMessagePeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMessages === null) {
			if ($this->isNew()) {
				$this->collMessages = array();
			} else {

				$criteria->add(MessagePeer::USER_ID, $this->getUserId());

				$this->collMessages = MessagePeer::doSelectJoinProduction($criteria, $con);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MessagePeer::USER_ID, $this->getUserId());

			if (!isset($this->lastMessageCriteria) || !$this->lastMessageCriteria->equals($criteria)) {
				$this->collMessages = MessagePeer::doSelectJoinProduction($criteria, $con);
			}
		}
		$this->lastMessageCriteria = $criteria;

		return $this->collMessages;
	}

	/**
	 * Temporary storage of collHistorys to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initHistorys()
	{
		if ($this->collHistorys === null) {
			$this->collHistorys = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User has previously
	 * been saved, it will retrieve related Historys from storage.
	 * If this User is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getHistorys($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BaseHistoryPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHistorys === null) {
			if ($this->isNew()) {
			   $this->collHistorys = array();
			} else {

				$criteria->add(HistoryPeer::USER_ID, $this->getUserId());

				HistoryPeer::addSelectColumns($criteria);
				$this->collHistorys = HistoryPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(HistoryPeer::USER_ID, $this->getUserId());

				HistoryPeer::addSelectColumns($criteria);
				if (!isset($this->lastHistoryCriteria) || !$this->lastHistoryCriteria->equals($criteria)) {
					$this->collHistorys = HistoryPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastHistoryCriteria = $criteria;
		return $this->collHistorys;
	}

	/**
	 * Returns the number of related Historys.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countHistorys($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BaseHistoryPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(HistoryPeer::USER_ID, $this->getUserId());

		return HistoryPeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a History object to this object
	 * through the History foreign key attribute
	 *
	 * @param      History $l History
	 * @return     void
	 * @throws     PropelException
	 */
	public function addHistory(History $l)
	{
		$this->collHistorys[] = $l;
		$l->setUser($this);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Historys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getHistorysJoinProduction($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BaseHistoryPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHistorys === null) {
			if ($this->isNew()) {
				$this->collHistorys = array();
			} else {

				$criteria->add(HistoryPeer::USER_ID, $this->getUserId());

				$this->collHistorys = HistoryPeer::doSelectJoinProduction($criteria, $con);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(HistoryPeer::USER_ID, $this->getUserId());

			if (!isset($this->lastHistoryCriteria) || !$this->lastHistoryCriteria->equals($criteria)) {
				$this->collHistorys = HistoryPeer::doSelectJoinProduction($criteria, $con);
			}
		}
		$this->lastHistoryCriteria = $criteria;

		return $this->collHistorys;
	}

	/**
	 * Temporary storage of collProductionHistorys to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initProductionHistorys()
	{
		if ($this->collProductionHistorys === null) {
			$this->collProductionHistorys = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User has previously
	 * been saved, it will retrieve related ProductionHistorys from storage.
	 * If this User is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getProductionHistorys($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BaseProductionHistoryPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProductionHistorys === null) {
			if ($this->isNew()) {
			   $this->collProductionHistorys = array();
			} else {

				$criteria->add(ProductionHistoryPeer::USER_ID, $this->getUserId());

				ProductionHistoryPeer::addSelectColumns($criteria);
				$this->collProductionHistorys = ProductionHistoryPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProductionHistoryPeer::USER_ID, $this->getUserId());

				ProductionHistoryPeer::addSelectColumns($criteria);
				if (!isset($this->lastProductionHistoryCriteria) || !$this->lastProductionHistoryCriteria->equals($criteria)) {
					$this->collProductionHistorys = ProductionHistoryPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProductionHistoryCriteria = $criteria;
		return $this->collProductionHistorys;
	}

	/**
	 * Returns the number of related ProductionHistorys.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countProductionHistorys($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BaseProductionHistoryPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(ProductionHistoryPeer::USER_ID, $this->getUserId());

		return ProductionHistoryPeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a ProductionHistory object to this object
	 * through the ProductionHistory foreign key attribute
	 *
	 * @param      ProductionHistory $l ProductionHistory
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProductionHistory(ProductionHistory $l)
	{
		$this->collProductionHistorys[] = $l;
		$l->setUser($this);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProductionHistorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProductionHistorysJoinProduction($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BaseProductionHistoryPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProductionHistorys === null) {
			if ($this->isNew()) {
				$this->collProductionHistorys = array();
			} else {

				$criteria->add(ProductionHistoryPeer::USER_ID, $this->getUserId());

				$this->collProductionHistorys = ProductionHistoryPeer::doSelectJoinProduction($criteria, $con);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProductionHistoryPeer::USER_ID, $this->getUserId());

			if (!isset($this->lastProductionHistoryCriteria) || !$this->lastProductionHistoryCriteria->equals($criteria)) {
				$this->collProductionHistorys = ProductionHistoryPeer::doSelectJoinProduction($criteria, $con);
			}
		}
		$this->lastProductionHistoryCriteria = $criteria;

		return $this->collProductionHistorys;
	}

	/**
	 * Temporary storage of collOnlines to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initOnlines()
	{
		if ($this->collOnlines === null) {
			$this->collOnlines = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User has previously
	 * been saved, it will retrieve related Onlines from storage.
	 * If this User is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getOnlines($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BaseOnlinePeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOnlines === null) {
			if ($this->isNew()) {
			   $this->collOnlines = array();
			} else {

				$criteria->add(OnlinePeer::USER_ID, $this->getUserId());

				OnlinePeer::addSelectColumns($criteria);
				$this->collOnlines = OnlinePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(OnlinePeer::USER_ID, $this->getUserId());

				OnlinePeer::addSelectColumns($criteria);
				if (!isset($this->lastOnlineCriteria) || !$this->lastOnlineCriteria->equals($criteria)) {
					$this->collOnlines = OnlinePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastOnlineCriteria = $criteria;
		return $this->collOnlines;
	}

	/**
	 * Returns the number of related Onlines.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countOnlines($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BaseOnlinePeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(OnlinePeer::USER_ID, $this->getUserId());

		return OnlinePeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a Online object to this object
	 * through the Online foreign key attribute
	 *
	 * @param      Online $l Online
	 * @return     void
	 * @throws     PropelException
	 */
	public function addOnline(Online $l)
	{
		$this->collOnlines[] = $l;
		$l->setUser($this);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Onlines from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getOnlinesJoinProduction($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BaseOnlinePeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOnlines === null) {
			if ($this->isNew()) {
				$this->collOnlines = array();
			} else {

				$criteria->add(OnlinePeer::USER_ID, $this->getUserId());

				$this->collOnlines = OnlinePeer::doSelectJoinProduction($criteria, $con);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OnlinePeer::USER_ID, $this->getUserId());

			if (!isset($this->lastOnlineCriteria) || !$this->lastOnlineCriteria->equals($criteria)) {
				$this->collOnlines = OnlinePeer::doSelectJoinProduction($criteria, $con);
			}
		}
		$this->lastOnlineCriteria = $criteria;

		return $this->collOnlines;
	}

	/**
	 * Temporary storage of collPermissions to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initPermissions()
	{
		if ($this->collPermissions === null) {
			$this->collPermissions = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User has previously
	 * been saved, it will retrieve related Permissions from storage.
	 * If this User is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getPermissions($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BasePermissionPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPermissions === null) {
			if ($this->isNew()) {
			   $this->collPermissions = array();
			} else {

				$criteria->add(PermissionPeer::USER_ID, $this->getUserId());

				PermissionPeer::addSelectColumns($criteria);
				$this->collPermissions = PermissionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PermissionPeer::USER_ID, $this->getUserId());

				PermissionPeer::addSelectColumns($criteria);
				if (!isset($this->lastPermissionCriteria) || !$this->lastPermissionCriteria->equals($criteria)) {
					$this->collPermissions = PermissionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPermissionCriteria = $criteria;
		return $this->collPermissions;
	}

	/**
	 * Returns the number of related Permissions.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countPermissions($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BasePermissionPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(PermissionPeer::USER_ID, $this->getUserId());

		return PermissionPeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a Permission object to this object
	 * through the Permission foreign key attribute
	 *
	 * @param      Permission $l Permission
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPermission(Permission $l)
	{
		$this->collPermissions[] = $l;
		$l->setUser($this);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related Permissions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getPermissionsJoinRoom($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'src/model/whiteboard/om/BasePermissionPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPermissions === null) {
			if ($this->isNew()) {
				$this->collPermissions = array();
			} else {

				$criteria->add(PermissionPeer::USER_ID, $this->getUserId());

				$this->collPermissions = PermissionPeer::doSelectJoinRoom($criteria, $con);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PermissionPeer::USER_ID, $this->getUserId());

			if (!isset($this->lastPermissionCriteria) || !$this->lastPermissionCriteria->equals($criteria)) {
				$this->collPermissions = PermissionPeer::doSelectJoinRoom($criteria, $con);
			}
		}
		$this->lastPermissionCriteria = $criteria;

		return $this->collPermissions;
	}

} // BaseUser
